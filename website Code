import React, { useState, useEffect } from "react";
import { BrowserRouter as Router, Routes, Route, Link } from "react-router-dom";

function Home() {
  return (
    <div className="p-6 space-y-4">
      <h1 className="text-3xl font-bold">Welcome to EduBridge</h1>
      <p className="text-lg max-w-xl">
        EduBridge is a low-bandwidth microlearning platform designed to bring inclusive and quality education to underserved communities.
      </p>
      <p>
        We align with <strong>UN SDG 4</strong>: Ensure inclusive and equitable quality education and promote lifelong learning opportunities for all.
      </p>
    </div>
  );
}

const subjects = [
  "Mathematics", "Science", "English", "History", "Geography", "Computer Science",
  "Art", "Music", "Economics", "Physics", "Chemistry", "Biology"
];

const defaultLessons = [
  { subject: "Mathematics", title: "Basic Algebra", content: "Learn how to solve simple algebraic equations." },
  { subject: "Science", title: "States of Matter", content: "Solid, liquid, gas — understand their properties." },
  { subject: "English", title: "Parts of Speech", content: "Nouns, verbs, adjectives — the building blocks of grammar." },
  { subject: "History", title: "Ancient Civilizations", content: "Explore early human societies like Mesopotamia and Egypt." },
  { subject: "Geography", title: "Continents and Oceans", content: "Identify the 7 continents and 5 oceans of the world." },
  { subject: "Computer Science", title: "What is Programming?", content: "An introduction to programming and algorithms." },
  { subject: "Art", title: "Primary Colors", content: "Red, blue, yellow — the foundation of color mixing." },
  { subject: "Music", title: "Musical Notes", content: "C, D, E, F, G, A, B — learn basic music theory." },
  { subject: "Economics", title: "Supply and Demand", content: "Understand how prices are affected by market forces." },
  { subject: "Physics", title: "Newton's Laws", content: "Learn about motion and force with Newton's three laws." },
  { subject: "Chemistry", title: "Periodic Table", content: "Introduction to elements and their arrangement." },
  { subject: "Biology", title: "Cell Structure", content: "Understand parts of a cell — nucleus, mitochondria, etc." }
];

function Lessons() {
  const [lessons, setLessons] = useState([]);
  const [newCard, setNewCard] = useState({ title: "", content: "", subject: subjects[0] });
  const [showForm, setShowForm] = useState(false);

  useEffect(() => {
    const saved = JSON.parse(localStorage.getItem("lessons"));
    if (saved && saved.length > 0) {
      setLessons(saved);
    } else {
      setLessons(defaultLessons);
      localStorage.setItem("lessons", JSON.stringify(defaultLessons));
    }
  }, []);

  const handleSaveCard = (e) => {
    e.preventDefault();
    const updated = [...lessons, newCard];
    localStorage.setItem("lessons", JSON.stringify(updated));
    setLessons(updated);
    setNewCard({ title: "", content: "", subject: subjects[0] });
    setShowForm(false);
  };

  const groupedLessons = subjects.reduce((acc, subject) => {
    acc[subject] = lessons.filter((l) => l.subject === subject);
    return acc;
  }, {});

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Lessons</h2>
        <button onClick={() => setShowForm(!showForm)} className="bg-blue-600 text-white px-4 py-2 rounded">
          {showForm ? "Close" : "Add Custom Card"}
        </button>
      </div>

      {showForm && (
        <form onSubmit={handleSaveCard} className="mb-6 space-y-4 p-4 border rounded">
          <div>
            <label className="block font-medium">Subject</label>
            <select
              value={newCard.subject}
              onChange={(e) => setNewCard({ ...newCard, subject: e.target.value })}
              className="w-full border p-2 rounded"
            >
              {subjects.map((subj) => (
                <option key={subj} value={subj}>{subj}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block font-medium">Title</label>
            <input
              type="text"
              value={newCard.title}
              onChange={(e) => setNewCard({ ...newCard, title: e.target.value })}
              className="w-full border p-2 rounded"
              required
            />
          </div>
          <div>
            <label className="block font-medium">Content</label>
            <textarea
              value={newCard.content}
              onChange={(e) => setNewCard({ ...newCard, content: e.target.value })}
              className="w-full border p-2 rounded h-32"
              required
            />
          </div>
          <button type="submit" className="bg-green-600 text-white px-4 py-2 rounded">
            Save Card
          </button>
        </form>
      )}

      {subjects.map((subject) => (
        <div key={subject} className="mb-8">
          <h3 className="text-xl font-semibold border-b pb-1 mb-2">{subject}</h3>
          <div className="space-y-2">
            {groupedLessons[subject]?.length ? (
              groupedLessons[subject].map((lesson, index) => (
                <div key={index} className="border p-4 rounded shadow">
                  <h4 className="text-lg font-bold">{lesson.title}</h4>
                  <p className="mt-1 whitespace-pre-wrap">{lesson.content}</p>
                </div>
              ))
            ) : (
              <p className="text-gray-500">No content yet in {subject}.</p>
            )}
          </div>
        </div>
      ))}
    </div>
  );
}

function Teacher() {
  const [title, setTitle] = useState("");
  const [content, setContent] = useState("");
  const [subject, setSubject] = useState(subjects[0]);
  const [message, setMessage] = useState("");

  const handleSubmit = (e) => {
    e.preventDefault();
    const existing = JSON.parse(localStorage.getItem("lessons")) || [];
    const updated = [...existing, { title, content, subject }];
    localStorage.setItem("lessons", JSON.stringify(updated));
    setTitle("");
    setContent("");
    setSubject(subjects[0]);
    setMessage("Lesson saved successfully!");
    setTimeout(() => setMessage(""), 3000);
  };

  return (
    <div className="p-6 max-w-xl">
      <h2 className="text-2xl font-bold mb-4">Teacher Upload Form</h2>
      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="block font-medium">Subject</label>
          <select
            value={subject}
            onChange={(e) => setSubject(e.target.value)}
            className="w-full border p-2 rounded"
          >
            {subjects.map((subj) => (
              <option key={subj} value={subj}>{subj}</option>
            ))}
          </select>
        </div>
        <div>
          <label className="block font-medium">Lesson Title</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            required
            className="w-full border rounded p-2"
          />
        </div>
        <div>
          <label className="block font-medium">Lesson Content</label>
          <textarea
            value={content}
            onChange={(e) => setContent(e.target.value)}
            required
            className="w-full border rounded p-2 h-32"
          />
        </div>
        <button type="submit" className="bg-blue-600 text-white px-4 py-2 rounded">
          Save Lesson
        </button>
        {message && <p className="text-green-600 font-medium">{message}</p>}
      </form>
    </div>
  );
}

function App() {
  return (
    <Router>
      <div className="bg-white shadow p-4 flex gap-6 sticky top-0 z-10">
        <Link to="/" className="text-blue-600 hover:underline">Home</Link>
        <Link to="/lessons" className="text-blue-600 hover:underline">Lessons</Link>
        <Link to="/teacher" className="text-blue-600 hover:underline">Teacher</Link>
      </div>

      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/lessons" element={<Lessons />} />
        <Route path="/teacher" element={<Teacher />} />
      </Routes>
    </Router>
  );
}

export default App;
